----STRUCTURI FOLOSITE-------

1.COZI
-> Implementarea cozilor folosite s-a realizat cu ajutorul a doi pointeri de tip lista
simplu inlantuita generica, IC va reprezinta inceputul cozii, din care se face extragerea,
iar SC este sfarsitul cozii, care se modifica in cazul inserarii in coada.
Campul dime retine dimensiunea informatiei care va fi inserata in fiecare celula
de lista. 
-> Functia IntrQ() initializeaza o coada altfel: se aloca un pointer de tip coada 
care primeste in campul dime dimensiunea primita ca parametru. Se seteaza inceputul
si sfarsitul listei pe NULL, coada fiind vida initial.
-> Introducerea in coada se face astfel: se aloca o noua celula de lista in care este 
pusa informatia primita ca parametru. Atunci cand coada este vida, se insereaza noua
celula ca fiind prima din coada, altfel se insereaza la sfarsitul cozii, dupa
principiul FIFO.
-> Extragerea din coada se face astfel: daca strucura este nevida, se  extrage 
din coada informatia din prima celula, dupa principiul FIFO.  Daca 
dupa extragere, inceputul cozii se afla pe NULL, adica a fost doar un element
in coada, se seteaza si sfarsitul cozii pe NULL. Se elibereaza informatia si celula
de lista din care s-a facut extragerea.
-> Concatenarea a doua cozi: se concateneaza coada sursa la coada destinatie, 
functia intoarce 1 daca a reusit sa concateneze elemente, altfel 0. Daca coada
sursa este vida, nu sunt elemente de concatenat si se returneaza 0. Daca 
coada destinatie este vida, inceputul si sfarsitul cozii sursa devin 
inceputul si sfarsitul cozii destinatie. Altfel, se concateneaza 
sfarsitul cozii destinatie la inceputul cozii sursa, iar sfarsitul 
cozii destinatie se muta pe sfarsitul cozii sursa. In final, se seteaza 
coada sursa vida.
-> Afisarea unei cozi se face prin parcugerea cu ajutorul listelor somplu 
inlantuite. Se prelucreaza informatia din fiecare celula a listei cu ajutorul functiei 
primita ca parametru.
-> Cautarea in coada se realizeaza cu ajutorul functiilor de prelucrare pentru coada:
inserare si extragere. Se initializeaza o coada auxiliara, se extrag pe rand elementele cozii
si se compara informatia din fiecare celula cu numele serialului cautat, apoi se introduc in
coada auxiliara. In final, se reface coada initiala prin concatenarea celei auxiliare
si se elibereaza coada auxiliara. Functia intoarce 1 daca serialul cu numele cautat se gaseste
in coada, altfel 0.
-> Pentru eliberarea spatiului ocupat de o coada, se foloseste functia ResetQ() care
elibereaza informatia si celulele de lista ale unei cozi, apoi se elibereaza pointerul 
alocat pentru structura de tip coada 

2.STIVE
-> Implementarea stivelor s-a realizat cu ajutorul unui pointer de tip lista simplu 
inlantuita care puncteaza spre varful stivei, din care se face inserarea si extragere
din stiva si campul dime care retine dimensiunea elementelor din stiva.
-> Initializarea unei stive: se aloca o structua de tip stiva si se seteaza campul dime
cu dimensiunea data ca parametru, iar varful stivei este pe NULL, deoarece intial stiva
este vida.
-> Introducerea in stiva, numita Push(): se introduce in stiva primita ca parametru
o noua celula de lista in care pune informatia primita ca parametru. Inserarea in
stiva se face dupa principiul LIFO, adica elementul nou inserat este pus in varful stivei.
-> Extragerea din stiva, numita Pop(): extrage informatia din celula de lista 
reprezentata de varful stivei si elibereaza spatiul ocupat de celula de lista din care 
s-a facut extragerea.
-> Rasturnarea unei stive sursa intr-o sursa destinatie se face astfel: initial, daca stiva 
sursa este vida, nu se poate rasturna, iar functia intoarce 0. Se parcurge coada sursa cu 
ajutorul listelor, fiecare element al cozii sursa este pus pe rand in varful cozii destinatie,
avansul in coada sursa facandu-se cu o lista auxiliara care retine mereu urmatorul element.
In final, coada sursa ramane vida, iar functia intoarce 1 pentru inserare cu succes.
-> Functia de afisare a unei stive afiseaza stiva primita, care este implementata cu ajutorul 
listelor simplu inlantuite generice. Se parcurge stiva si se prelucreaza fiecare informatie
din celulele de lista.
-> Functia de cautare in stiva verifica daca in stiva primita ca parametru se afla
serialul cu numele cautat. Se extrage din stiva, dupa principiul LIFO, fiecare element, se 
compara cu numele cautat, apoi se introduce intr-o stiva auxiliara. Se reface stiva initiala prin 
rasturnarea celei auxiliare. Functia intoarce 1 daca a fost gasit serialul, altfel 0.
->  Pentru eliberarea spatiului ocupat de o stiva, se foloseste functia ResetS() care
elibereaza informatia si celulele de lista ale unei stive, apoi se elibereaza pointerul 
alocat pentru structura de tip stiva.

3. LISTE
-> Am folosit liste simplu inlantuite generice, definite de o structura care contine informatia
dintr-o celula, de tip void* si pointerul catre urmatoarea celula a listei.
-> Pentru inserarea unui serial intr-una dintre cele 4 liste reprezentate de tipurile serialelor
am folosit functia Inserare_TLG(). Se aloca spatiu pentru noua celula si se apeleaza o functie pentru
citirea serialului ce reprezinta informatia din celula. Pentru inserare in lista, daca doua 
seriale au acelasi rating, se cauta primul serial cu numele mai mare decat cel de inserat, 
pentru a insera inaintea lui. Altfel, se cauta primul serial cu ratingul mai mic decat cel de 
inserat si se face inserarea inaintea lui. Se face inserarea in lista si se afiseaza la output
un mesaj corespunzator.
-> Functia Cardinal_lista() determina numarul de celule dintr-o lista, parcurgand lista 
pana se ajunge la NULL.
-> Functia Elimina_ultimul() elimina ultimul element dintr-o lista primita ca parametru.
Aceasta parcurge lista pana la ultima celula nevida, care este eliberata.
-> Functia Cauta_in_liste() cauta serialul cu numele primit ca parametru in toate listele
disponibile. Se returneaza id-ul listei in care a fost gasit, iar pentru lista top10 se
returneaza 4. 
-> Functia Distruge_TLG distruge o lista simplu inlantuita celula cu celula, eliberand 
si informatia din fiecare celula.

4. TSerial si TSezon
-> Strucra TSerial defineste un serial, care are un id, nume alocat dinamic, rating, 
un numar de sezoane, durata totala a serialului(suma duratelor tuturor episoadelor), 
durata de timp vizionata deja din serial si coada de sezoane, implementata cu liste,
care in fiecare celula contine un sezon.
-> Strcura TSezon defineste un sezon al unui serial, contine numarul de episoade ale
sezonului si coada de episoade, care este implementata cu liste si contine in campul
informatie durata fiecarui episod. 

-----MAIN---------

-> Se declara cate o lista pentru fiecare  categorie de seriale si se initializeaza
stivele si cozile cu care vom lucra. Se deschid fisiele de input si output.
Se citesc comenzile din fisierul de input si in functie de acestea se efectueaza 
operatia dorita. 

-> Daca se citeste din fisierul de input comanda ADD: se verifica daca numarul 
serialelor este mai mic decat maximul de 2048, apoi se insereaza in lista in functie
de id-ul fiecarei categorii. Un serial reprezinta informatia dintr-o celula de lista.
Functia Citeste_serial() aloca un serial si initializeaza coada de sezoane.
Se initializeaza campurile serialului si coada de sezoane, implementata cu liste
simplu inlantuite, fiecare celula de lista avand ca informatie un sezon. 
Se determina durata totala a serialului ca fiind suma duratelor tuturor episoadelor,
initial serialul fiind total nevizionat.

Pentru fiecarui sezon, se apeleaza functia Citeste_sezon(), care aloca un sezon 
dintr-un serial. Se initializeaza coada de episoade. Se citeste numarul de episoade
ale serialului, iar pentru fiecare sezon se citeste durata, care reprezinta informaia 
celulor de lista din coada de episoade. Durata fiecarui episod se adauga la durata 
totala a serialului, primita ca parametru.

-> Daca se citeste din fisierul de input comanda SHOW: se verifica daca se doreste 
afisarea unei categorii de seriale data de un numar intreg, adica de id sau daca
se doreste afisarea unei structuri al carei nume este data de un string (exemplu:
"later", "top10"). Apoi se apeleaza functia specifica pentru structura care se 
doreste a fi afisata. 

-> Daca se citeste din fisierul de input comanda ADD TOP10: se apeleaza functia 
Add_top_10() care insereaza in lista top10 un nou serial la pozitia dorita.
Se aloca o noua celula de lista si se citesc datele serialului care urmeaza a 
fi inserat. Daca in lista top10 se afla deja 10 seriale, va fi eliminat. Se parcurge 
lista top10 pana la pozitia dorita, apoi se face inserare inaintea ei. Daca se face
inserare pe prima pozitie, se schimba inceputul listei, iar daca lista este vida, 
se insereaza primul element al listei. Se afiseaza in fisierul de output numele si ratingul 
tuturor serialelor din lista.

->  Daca se citeste din fisierul de input comanda LATER: se citeste numele serialului
care se doreste a fi adaugat in coada later. Se apeleaza functia Cauta_in_liste(),
care returneaza id-ul listei in care se afla serial cautat, iar pentru top10 va returna 4.
In functie de ID, se apeleaza functia Add_later() avand ca parametru lista in care 
se afla serialul. Functia Add_later()  adauga un serial din lista primita ca 
parametru in coada later.Se parcurge lista pana cand se gaseste serialul cu numele primit ca 
parametru, apoi se muta serialul din celula gasita intr-un pointer care va fi introdus in 
coada si se face avansul in lista. Daca s-a reusit introducerea, se afiseaza mesajul 
coespunzator la output si creste numarul de elemente in coada later.

-> Daca se citeste din fisierul de input comanda ADD_SEZ: se verifica daca serialul
se afla deja in history, adica a fost terminat. Daca nu se afla,se apeleaza functia Cauta_in_liste(),
care returneaza id-ul listei in care se afla serial cautat, iar pentru top10 va returna 4.
In functie de ID, se apeleaza functia Add_sez() avand ca parametru lista in care 
se afla serialul Functia parcurge lista primita ca parametru pana cand gaseste
serialul cu numele cautat, caruia ii adauga un sezon nou apeland functia Add_sez_for_serial(),
Aceasta adauga un sezon nou serialului primit ca parametru. Se adauga la durata totala a
serialului durata noului sezon, iar sezonul este introdus in coada de sezoane.
Este incrementat numarul de sezoane ale serialului si se afiseaza un mesaj corespunzator
la output. Pentru alocarea si citirea datelor noului sezon, functia Create_new_sezon() 
aloca spatiu pentru un nou sezon si citeste din fisierul de input numarul de episoade
ale sezonului. Se initializeaza coadade episoade in care se introduc celulele ce
reprezinta episoadele, care au ca informatie durata fiecarui episod. Aceasta se aduna la
durata sezonului, returnat prin efect lateral. 

Pentru adaugarea unui sezon nou in coada later, se apeleaza functia Add_sez_in_later(),
Se extrage fiecare serial din coada later si se compara numele cu cel primit ca parametru,
apoi se introduce intr-o coada auxiliara. Daca serialul a fost gasit, se adauga un nou sezon.
In final, se reface coada initiala prin concatenarea celei auxiliare la aceasta.

Pentru adaugarea unui sezon nou in stiva currently_watching, se apeleaza functia 
Add_sez_in_watching(). Se cauta in stiva elementul care are numele primit ca parametru,
prin extragerea fiecarui serial din stiva initiala si introducerea lui intr-una 
auxiliara. Daca serialul a fost gasit, se adauga un sezon, In final este refacuta stiva
initiala prin rasturnarea stivei auxiliare.

-> Daca se citeste din fisierul de input comanda WATCH: se verifica daca serialul
se afla deja in history, adica a fost terminat. Daca nu se afla, se verifica daca 
numele serialului care se doreste a fi vizonat se afla intr-o lista, iar in functie
de id-ul listei se vizoneaza durata serialului, apeland functia Watch_fromTLG().
Se parcurge lista pana se gaseste serialul cu numele primit ca parametru. Serialul 
este mutat din lista, apoi se face avansul. Daca a fost gasit,se vizioneaza 
un numar de minute din serial. Daca acesta nu a fost terminat si mutat in stiva
history, se muta in stiva currently_watching.

Daca serialul care se doreste a fi vizionat se afla in coada later, se apeleaza 
Watch_from_later(). Se extrag pe rand serialele din coada si se compara numele cu 
cel cautat. Cand a fost gasit, se vizioneaza serialul. Daca a fost terminat, nu
se mai adauga in stiva auxiliara, ci direct in history. In final, se reface 
stiva auxiliara prin rasturnarea celei auxiliare.

Daca serialul care se doreste a fi vizionat a fost deja inceput si se afla
in stiva currently_watching, se apeleaza functia Continue_to_watch(). Se extrage
fiecare element din stiva si se compara numele cu cel cautat. Daca s-a gasit,
se vizioneaza serialul. Serialul nu va mai fi introdus in stiva auxiliara.
Daca a fost finalizat, s-a mutat direct in stiva history. Altfel, dupa refacerea 
stivei initiale prin rasturnarea celei auxiliare, serialul vizionat este introdus
in varful stivei currently_watching.

--------UTILS-----
In fisierul utils.c si biblioteca utils.h am adaugat o serie de functii si
definitii care ajuta la implementarea structurilor generice: functii care compara
numele a doua seriale, care compara ratingul, numele unui serial cu un nume dat
si care afiseaza numele si ratingul unui serial in fisierul de output.
Functia is_integer() returneaza 1 daca primul caracter din sirul
primit ca parametru este cifra, 0 altfel. Este folosita pentru comanda SHOW, pentru
a stii ce structura se doreste a fi afisata.

